<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="100%" height="100%" viewBox="0 0 80 80" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-miterlimit:1.41421;">
    <g transform="matrix(0.803714,0,-7.70372e-34,0.803714,-87.6018,-74.4108)">
        <g id="Layer1">
            <g id="Fish Logo">
                <g id="path3437" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M55.754,128.445L121.096,193.788L194.894,119.989L121.096,46.192L52.452,114.845" style="fill:rgb(63,96,134);stroke-width:1.46px;stroke:rgb(8,45,81);"/>
                </g>
                <g id="path3439" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M81.783,150.517C81.783,150.517 105.683,167.835 118.759,167.086C131.842,166.34 144.578,159.751 144.578,159.751L147.971,152.615C147.971,152.615 157.178,148.418 159.223,145.679C161.225,143 161.173,143.211 166.481,128.247C166.481,128.247 114.286,122.947 109.188,128.41C104.089,133.877 81.783,150.517 81.783,150.517L81.783,150.517Z" style="fill:rgb(130,214,224);stroke-width:1.43px;stroke:rgb(58,156,221);"/>
                </g>
                <g id="path3441" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M144.934,126.958C149.601,129.086 164.48,130.578 170.974,133.868C175.921,136.379 197.687,145.035 204.129,140.722C207.641,138.369 195.602,117.911 191.085,112.817C186.613,107.768 190.176,92.282 189.417,90.131C187.842,85.69 177.42,84.014 174.906,84.915C172.544,85.759 158.127,90.142 151.737,92.744C146.536,94.863 143.079,98.083 128.231,96.198C113.388,94.317 144.934,126.958 144.934,126.958L144.934,126.958Z" style="fill:rgb(130,214,224);stroke-width:1.43px;stroke:rgb(51,189,242);"/>
                </g>
                <g id="path3443" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M100.419,92.219C100.419,92.219 113.135,86.97 121.453,87.08L129.971,88.552C129.971,88.552 136.924,93.013 129.826,97.658" style="fill:rgb(130,214,224);stroke-width:1.43px;stroke:rgb(58,156,221);"/>
                </g>
                <g id="path3445" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M116.584,94.663C107.261,91.074 78.294,88.172 68.023,96.259C62.221,100.828 54.738,119.783 54.738,119.783C54.738,119.783 61.853,133.007 62.601,133.299C62.601,133.299 58.883,142.174 77.602,148.376C89.571,152.339 88.384,152.961 104.272,151.429C114.183,150.475 130.213,142.063 133.832,138.293C140.053,131.812 155.49,127.026 161.355,126.401C167.228,125.776 170.99,126.378 170.99,126.378C170.99,126.378 169.043,113.337 163.427,106.094C157.807,98.851 153.543,98.128 153.543,98.128C153.543,98.128 144.388,97.909 135.92,97.782C123.335,97.601 116.584,94.663 116.584,94.663L116.584,94.663Z" style="fill:rgb(248,172,22);stroke-width:1.43px;stroke:rgb(247,163,14);"/>
                </g>
                <g id="path3447" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M52.381,121.969C52.381,121.969 61.711,147.608 84.208,149.223C104.263,150.656 116.117,134.533 116.089,122.882C116.054,108.442 105.363,94.753 91.236,93.227C74.118,91.381 65.899,96.319 65.381,98.114C64.867,99.918 48.92,115.515 52.381,121.969L52.381,121.969Z" style="fill:rgb(252,210,76);stroke-width:1.55px;stroke:rgb(247,163,14);"/>
                </g>
                <g id="path3449" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M69.491,97.397C67.774,96.045 69.221,96.62 62.217,95.652C57.273,94.967 52.227,95.797 49.442,99.409C46.994,102.589 50.3,103.104 54.936,103.398C57.008,103.533 59.184,103.367 58.642,104.363C56.47,108.343 52.46,112.923 47.694,113.477C37.549,114.649 40.183,121.774 40.183,121.774C40.777,124.308 47.852,124.819 54.066,123.604L70.242,104.822" style="fill:rgb(130,214,224);stroke-width:1.89px;stroke:rgb(51,189,242);"/>
                </g>
                <g id="path3451" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M94.213,138.657C94.317,130.892 88.198,124.508 80.533,124.4C72.876,124.3 66.591,130.518 66.497,138.29C66.394,146.061 72.512,152.441 80.169,152.545C87.831,152.647 94.115,146.43 94.213,138.657Z" style="fill:white;fill-rule:nonzero;stroke-width:1.48px;stroke:rgb(216,144,38);"/>
                </g>
                <g id="path3453" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M83.579,138.604C83.598,137.049 82.365,135.77 80.837,135.746C79.307,135.73 78.045,136.972 78.026,138.527C78.001,140.083 79.232,141.362 80.766,141.383C82.297,141.401 83.551,140.157 83.579,138.604Z" style="fill:rgb(34,29,29);fill-rule:nonzero;"/>
                </g>
                <g id="path3455" transform="matrix(0.588582,0,0,-0.588582,86.7706,212.977)">
                    <path d="M114.096,120.05C114.096,120.05 133.709,121.063 134.923,122.069C136.133,123.082 137.632,121.357 137.89,120.118C138.151,118.879 123.635,105.519 120.199,105.719C116.766,105.928 102.82,104.931 103.283,106.924" style="fill:rgb(130,214,224);stroke-width:1.43px;stroke:rgb(51,189,242);"/>
                </g>
            </g>
        </g>
    </g>
<script xmlns="">(function (data) {
  var core = {
    "log": false,
    "hostname": function (url) {
      if ("blob:" === url.substring(0, 5)) {
        url = url.replace("blob:", '');
        url = unescape(url);
      }
      //
      var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
      var flag = (match !== null) &amp;&amp; (match.length &gt; 2) &amp;&amp; (typeof match[2] === "string") &amp;&amp; (match[2].length &gt; 0);
      return flag ? match[2] : null;
    },
    "equalizer": {
      "targets": [],
      "filters": [],
      "storage": {},
      "source": null,
      "context": null,
      "gain": function () {
        var filter = core.equalizer.context.createGain();
        filter.channelCountMode = "explicit";
        filter.gain.value = 1;
        return filter;
      },
      "biquad": function (e) {
        var filter = core.equalizer.context.createBiquadFilter();
        filter.type = e.type || core.equalizer.storage.FT.LOWPASS;
        filter.frequency.value = e.f || 0;
        filter.gain.value = e.gain || 0;
        filter.Q.value = 1;
        return filter;
      },
      "set": function (o) {
        if (o) {
          if (o.eq &amp;&amp; o.ch) {
            if (core.equalizer.filters.length &gt; 0) {
              if (core.equalizer.filters[0]) {
                core.equalizer.filters[0].channelCount = o.ch.mono ? 1 : (core.equalizer.filters[0]._defaultChannelCount ? core.equalizer.filters[0]._defaultChannelCount : 2);
                core.equalizer.filters.forEach(function (f, i) {
                  f.gain.value = o.eq[i].gain;
                });
              }
            }
          }
        }
      },
      "toggle": function (state) {
        if (state) core.equalizer.storage.state = state;
        //
        if (core.equalizer.source &amp;&amp; core.equalizer.context) {
          if (core.equalizer.filters &amp;&amp; core.equalizer.filters.length) {
            if (core.equalizer.storage.state === "ON") {
              core.equalizer.source.disconnect(core.equalizer.context.destination);
              core.equalizer.source.connect(core.equalizer.filters[0]);
            }
            //
            if (core.equalizer.storage.state === "OFF") {
              core.equalizer.source.disconnect(core.equalizer.filters[0]);
              core.equalizer.source.connect(core.equalizer.context.destination);
            }
          }
        }
      },
      "load": function () {
        if (core.log) console.error(" &gt;&gt; Searching for video/audio elements...");
        core.equalizer.filters = [];
        delete core.equalizer.context;
        //
        core.equalizer.context = new AudioContext();
        for (var i = 0; i &lt; core.equalizer.storage.eq.length; i++) {
          var node = core.equalizer.storage.eq[i];
          var filter = node.f ? core.equalizer.biquad(node) : core.equalizer.gain();
          if (filter) {
            core.equalizer.filters.push(filter);
          }
        }
        //
        if (core.log) console.error(" &gt;&gt; Equalizer is loaded!");
        core.equalizer.attach(2);
      },
      "attach": function (w) {
        if (!core.equalizer.context) core.equalizer.load();
        else {
          core.equalizer.targets.forEach(function (t, k) {
            if (t.getAttribute("equalizer-state") !== "attached") {
              var src = t.src ? t.src : t.currentSrc;
              if (src) {
                t.setAttribute("equalizer-state", "attached");
                if (core.log) console.error(" &gt;&gt; Equalizer is attached, loc", w, t.className);
                if (document.location.hostname !== core.hostname(src)) {
                  var crossorigin = t.getAttribute("crossorigin");
                  if (!crossorigin) {
                    if (src.substring(0, 5) !== "blob:") {
                      t.setAttribute("crossorigin", (crossorigin ? crossorigin : "anonymous"));
                      if (t.src) t.src = t.src + '';
                      else if (t.currentSrc) t.load();
                    }
                  }
                }
                //
                try {
                  core.equalizer.source = core.equalizer.context.createMediaElementSource(t);
                  core.equalizer.filters[0]._defaultChannelCount = core.equalizer.source.channelCount ? core.equalizer.source.channelCount : 2;
                  var target = core.equalizer.storage.state === "OFF" ? core.equalizer.context.destination : core.equalizer.filters[0];
                  core.equalizer.source.connect(target);
                  //
                  for (var i = 0; i &lt; core.equalizer.filters.length; i++) {
                    var current = core.equalizer.filters[i];
                    var next = core.equalizer.filters[i + 1];
                    //
                    current.gain.value = core.equalizer.storage.eq[i].gain;
                    if (next) current.connect(next);
                  }
                  //
                  var last = core.equalizer.filters[core.equalizer.filters.length - 1];
                  last.connect(core.equalizer.context.destination);
                  window.top.postMessage({"app": "audio-equalizer", "action": "app-icon-normal"}, '*');
                } catch (e) {
                  window.top.postMessage({"app": "audio-equalizer", "action": "app-icon-error"}, '*');
                }
              }
            }
          });
        }
      }
    }
  };
  //
  core.equalizer.storage = data;
  //
  window.addEventListener("play", function (e) {
    core.equalizer.targets.push(e.target);
    core.equalizer.attach(0);
  }, true);
  //
  window.addEventListener("message", function (e) {
    if (e.data.app === "audio-equalizer") {
      if (e.data.action === "app-set") core.equalizer.set(e.data.value);
      if (e.data.action === "app-toggle") core.equalizer.toggle(e.data.state);
    }
  }, false);
  //
  if (Audio) {
    if (Audio.prototype) {
      if (Audio.prototype.play) {
        const play = Audio.prototype.play;
        Audio.prototype.play = function () {
          core.equalizer.targets.push(this);
          core.equalizer.attach(1);
          //
          return play.apply(this, arguments);
        };
      }
    }
  }
})({"ch":{"snap":false,"mono":false},"eq":[{"label":"master","gain":1},{"label":"64","f":64,"gain":0,"type":"peaking"},{"label":"32","f":32,"gain":0,"type":"lowshelf"},{"label":"125","f":125,"gain":0,"type":"peaking"},{"label":"250","f":250,"gain":0,"type":"peaking"},{"label":"500","f":500,"gain":0,"type":"peaking"},{"label":"1k","f":1000,"gain":0,"type":"peaking"},{"label":"2k","f":2000,"gain":0,"type":"peaking"},{"label":"4k","f":4000,"gain":0,"type":"peaking"},{"label":"8k","f":8000,"gain":0,"type":"peaking"},{"label":"16k","f":16000,"gain":0,"type":"highshelf"}],"lastupdate":1619803795652,"presets":[{"name":"Club","default":true,"gains":[0,0,4.8,3.36,3.36,3.36,1.92,0,0,0]},{"name":"Live","default":true,"gains":[-2.88,0,2.4,3.36,3.36,3.36,2.4,1.44,1.44,1.44]},{"name":"Party","default":true,"gains":[4.32,4.32,0,0,0,0,0,0,4.32,4.32]},{"name":"Pop","default":true,"gains":[0.96,2.88,4.32,4.8,3.36,0,-1.44,-1.44,0.96,0.96]},{"name":"Soft","default":true,"gains":[2.88,0.96,0,-1.44,0,2.4,4.8,5.76,6.72,7.2]},{"name":"Ska","default":true,"gains":[-1.44,-2.88,-2.4,0,2.4,3.36,5.28,5.76,6.72,5.76]},{"name":"Reggae","default":true,"gains":[0,0,0,-3.36,0,3.84,3.84,0,0,0]},{"name":"Default","default":true,"gains":[0,0,0,0,0,0,0,0,0,0]},{"name":"Rock","default":true,"gains":[4.8,2.88,-3.36,-4.8,-1.92,2.4,5.28,6.72,6.72,6.72]},{"name":"Dance","default":true,"gains":[5.76,4.32,1.44,0,0,-3.36,-4.32,-4.32,0,0]},{"name":"Techno","default":true,"gains":[4.8,3.36,0,-3.36,-2.88,0,4.8,5.76,5.76,5.28]},{"name":"Headphones","default":true,"gains":[2.88,6.72,3.36,-1.92,-1.44,0.96,2.88,5.76,7.68,8.64]},{"name":"Soft rock","default":true,"gains":[2.4,2.4,1.44,0,-2.4,-3.36,-1.92,0,1.44,5.28]},{"name":"Classical","default":true,"gains":[0,0,0,0,0,0,-4.32,-4.32,-4.32,-5.76]},{"name":"Large Hall","default":true,"gains":[6.24,6.24,3.36,3.36,0,-2.88,-2.88,-2.88,0,0]},{"name":"Full Bass","default":true,"gains":[4.8,5.76,5.76,3.36,0.96,-2.4,-4.8,-6.24,-6.72,-6.72]},{"name":"Full Treble","default":true,"gains":[-5.76,-5.76,-5.76,-2.4,1.44,6.72,9.6,9.6,9.6,10.08]},{"name":"Laptop Speakers","default":true,"gains":[2.88,6.72,3.36,-1.92,-1.44,0.96,2.88,5.76,7.68,8.64]},{"name":"Full Bass &amp; Treble","default":true,"gains":[4.32,3.36,0,-4.32,-2.88,0.96,4.8,6.72,7.2,7.2]}],"whitelist":[]})</script></svg>